name: Build and Push Docker Image

on:
  schedule:
    # Check for updates daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering
  push:
    branches:
      - main
    paths:
      - 'Dockerfile'
      - '.github/workflows/docker-build.yml'

env:
  REGISTRY: docker.io
  IMAGE_NAME: rigeldev/deno-deployctl

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      deno-version: ${{ steps.get-versions.outputs.deno-version }}
      deployctl-version: ${{ steps.get-versions.outputs.deployctl-version }}
      should-build: ${{ steps.check-build.outputs.should-build }}
      image-tag: ${{ steps.get-versions.outputs.image-tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest versions
        id: get-versions
        run: |
          # Get latest Deno version from Docker Hub API
          DENO_VERSION=$(curl -s "https://registry.hub.docker.com/v2/repositories/denoland/deno/tags/?page_size=100" | \
            jq -r '.results[] | select(.name | test("^[0-9]+\\.[0-9]+\\.[0-9]+$")) | .name' | \
            sort -V | tail -1)
          
          # Get latest deployctl version from JSR API
          DEPLOYCTL_VERSION=$(curl -s "https://jsr.io/@deno/deployctl/meta.json" | \
            jq -r '.latest')
          
          # Create image tag
          IMAGE_TAG="${DENO_VERSION}-${DEPLOYCTL_VERSION}"
          
          echo "deno-version=${DENO_VERSION}" >> $GITHUB_OUTPUT
          echo "deployctl-version=${DEPLOYCTL_VERSION}" >> $GITHUB_OUTPUT
          echo "image-tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          
          echo "Latest Deno version: ${DENO_VERSION}"
          echo "Latest deployctl version: ${DEPLOYCTL_VERSION}"
          echo "Image tag: ${IMAGE_TAG}"

      - name: Check if image already exists
        id: check-build
        run: |
          IMAGE_TAG="${{ steps.get-versions.outputs.image-tag }}"
          
          # Check if image with this tag already exists on Docker Hub
          if docker manifest inspect ${{ env.IMAGE_NAME }}:${IMAGE_TAG} > /dev/null 2>&1; then
            echo "Image with tag ${IMAGE_TAG} already exists"
            echo "should-build=false" >> $GITHUB_OUTPUT
          else
            echo "Image with tag ${IMAGE_TAG} does not exist, will build"
            echo "should-build=true" >> $GITHUB_OUTPUT
          fi

  build-and-push:
    needs: check-versions
    runs-on: ubuntu-latest
    if: needs.check-versions.outputs.should-build == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Update Dockerfile with latest versions
        run: |
          DENO_VERSION="${{ needs.check-versions.outputs.deno-version }}"
          DEPLOYCTL_VERSION="${{ needs.check-versions.outputs.deployctl-version }}"
          
          # Update Dockerfile with latest versions
          sed -i "s/FROM denoland\/deno:.*/FROM denoland\/deno:${DENO_VERSION}/" Dockerfile
          sed -i "s/jsr:@deno\/deployctl@.*/jsr:@deno\/deployctl@${DEPLOYCTL_VERSION}/" Dockerfile
          
          echo "Updated Dockerfile:"
          cat Dockerfile

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ needs.check-versions.outputs.image-tag }}
            ${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create and push updated Dockerfile
        if: github.ref == 'refs/heads/main'
        run: |
          # Configure git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Check if there are changes to commit
          if git diff --quiet Dockerfile; then
            echo "No changes to Dockerfile"
          else
            # Commit and push the updated Dockerfile
            git add Dockerfile
            git commit -m "Update to Deno ${{ needs.check-versions.outputs.deno-version }} and deployctl ${{ needs.check-versions.outputs.deployctl-version }}"
            git push
          fi

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: ${{ env.IMAGE_NAME }}
          readme-filepath: ./README.md
